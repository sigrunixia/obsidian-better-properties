body {
	--better-properties-select-opactiy: 1;
	--better-properties-select-saturation: 55%;
	--better-properties-select-lightness: 30%;
	--better-properties-select-bg: var(--better-properties-select-gray);

	&.theme-light {
		--better-properties-select-saturation: 80%;
		--better-properties-select-lightness: 80%;
	}

	--better-properties-select-red: hsl(
		from rgb(var(--color-red-rgb)) h var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-orange: hsl(
		from rgb(var(--color-orange-rgb)) h
			var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-yellow: hsl(
		from rgb(var(--color-yellow-rgb)) h
			var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-green: hsl(
		from rgb(var(--color-green-rgb)) h
			var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-blue: hsl(
		from rgb(var(--color-blue-rgb)) h var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-cyan: hsl(
		from rgb(var(--color-cyan-rgb)) h var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-purple: hsl(
		from rgb(var(--color-purple-rgb)) h
			var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-pink: hsl(
		from rgb(var(--color-pink-rgb)) h var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);

	--better-properties-select-transparent: transparent;
	--better-properties-select-gray: hsl(
		from gray h s var(--better-properties-select-lightness)
	);
}

.better-properties-select-option {
	&.better-properties-select-container,
	& .suggestion-content {
		color: var(--metadata-input-text-color);
		background-color: var(--better-properties-select-bg);
		border-radius: var(--radius-s);
		padding: var(--size-2-1) var(--size-2-2);
	}
}

.better-properties-property-value-inner {
	&.better-properties-mod-select {
		padding: var(--size-2-2);
		display: flex;
		justify-content: start;
		align-items: center;
		gap: var(--size-4-1);
		padding: var(--input-padding);
		width: 100%;

		& > .better-properties-select-container {
			display: flex;
			align-items: center;
			gap: var(--size-2-1);
			min-width: 2ch;
			font-size: var(--metadata-input-font-size);
			cursor: default;
			--better-properties-close-display: none;

			&:focus-within {
				--better-properties-close-display: flex;
			}

			/* & > .better-properties-select-input {
			} */

			& > .better-properties-select-close {
				cursor: var(--cursor);
				color: rgb(var(--mono-rgb-100));
				border-radius: var(--radius-s);
				display: var(--better-properties-close-display);
				align-items: center;
				--icon-size: var(--icon-xs);
				--icon-stroke: var(--icon-xs-stroke-width);

				&:hover {
					color: rgb(var(--mono-rgb-0));
				}
			}
		}

		/* STYLED */
		/* & {
			& > select.dropdown {
				background-color: transparent;
				box-shadow: none;
				border: none;
				background-image: none;
				padding: var(--size-2-1);
				text-align: center;
				border-radius: var(--radius-s);
				height: 1.5lh;
				width: auto;
				min-width: none;

				--color: var(--color-red-rgb);
				background-color: rgba(var(--color), 0.2);
			}
		} */
	}

	&.better-properties-mod-toggle {
		display: flex;
		justify-content: center;
		align-items: center;
		padding: var(--input-padding);
	}

	&.better-properties-mod-created {
		pointer-events: none;
	}

	&.better-properties-mod-title {
		width: 100%;
		& > input {
			background-color: transparent;
			width: 100%;
		}
	}

	&.better-properties-mod-markdown {
		padding: var(--input-padding);
		&:has(.collapse-indicator.collapse-icon) {
			padding: 0 16px; /* 10px is width of svg-icon and 5px is padding-inline-end of .collapse-indicator plus an extra 1px for space... unfortunately these are manually defined in default stylesheet */
		}
		width: 100%;
		font-family: var(--font-text) !important;
		line-height: var(--line-height-normal) I !important;

		& .markdown-source-view.mod-cm6.is-readable-line-width .cm-content,
		& .mod-cm6.is-readable-line-width .cm-content {
			width: unset !important;
		}

		& div.cm-gutters {
			display: none !important;
		}
		& div.cm-scroller {
			overflow: visible;

			.Í¼1 & {
				font-family: var(--font-text);
				line-height: var(--line-height-normal);
			}
		}

		& .cm-line:not(.HyperMD-codeblock),
		& .cm-content,
		& .cm-sizer {
			max-width: none !important;
			/* width: fit-content !important; */
			width: 100% !important;
			line-height: inherit !important;
			display: inline-block;
		}
		& div[role="textbox"] {
			/* width: fit-content; */
			/* width: 100% !important; */
			text-wrap: wrap;
			white-space: pre-line;
			display: inline-flex;
			flex-direction: column;
		}
		& * {
			text-align: inherit;
			/* width: 100% !important; */
		}
	}
}

.metadata-property:has(.dropdown) {
	--input-radius: unset;
}

.metadata-property:has(
		> .metadata-property-key
			> .better-properties-properties-group-collapse-indicator[data-better-properties-is-collapsed]
	) {
	.metadata-property-value {
		display: none;
	}
	.better-properties-properties-group-collapse-indicator {
		--better-properties-collapse-opacity: 1;
	}
}

.metadata-property:has(.better-properties-mod-group) {
	display: flex;
	flex-direction: column;
	position: relative;
	--better-properties-indent-size: var(--list-indent-editing);
	--better-properties-indent-size-2x: calc(var(--list-indent-editing) * 2);
	--better-properties-collapse-opacity: 0;

	&:hover {
		--better-properties-collapse-opacity: 1;
	}

	> .metadata-property-value:focus-within {
		background-color: var(--metadata-input-background);
	}

	.better-properties-properties-group-collapse-indicator {
		display: flex;
		justify-content: center;
		align-items: center;
		margin: auto 0;
		opacity: var(--better-properties-collapse-opacity);

		svg.svg-icon {
			color: var(--nav-collapse-icon-color);
			/* stroke-width: 4px;
			width: 10px;
			height: 10px; */
			transition: transform 100ms ease-in-out;
		}

		&[data-better-properties-is-collapsed] {
			transform: rotate(calc(var(--direction) * 90deg));

			svg.svg-icon {
				color: var(--collapse-icon-color-collapsed);
			}
		}
	}

	&::before {
		content: "";
		position: absolute;
		left: calc(
			var(--better-properties-indent-size) - 1px
		); /* TODO idk why this needs to be offset by 1px */
		top: var(--input-height);
		width: var(--indentation-guide-width);
		height: calc(100% - var(--input-height));
		background-color: var(--indentation-guide-color);
	}

	.better-properties-property-value-inner.better-properties-mod-group.metadata-container {
		display: flex;
		flex-direction: column;
		width: 100%;
		margin-inline-start: var(--better-properties-indent-size-2x);
		margin-block-end: 0px;

		div.better-properties-property-group-add-property.metadata-add-button.text-icon-button {
			width: fit-content;
		}

		/* TODO this still isn't quite matching the default... it's just not square */
		div.clickable-icon.metadata-property-warning-icon {
			--icon-size: var(--icon-s);
			margin-inline-end: 0px;
			margin-inline-start: 0px;

			&:hover {
				color: var(--text-warning);
				background-color: rgba(var(--color-orange-rgb), 0.15);
			}
		}
	}
}

div.setting-item.better-properties-list-setting {
	flex-direction: column;
	align-items: start;
	--item-width: 100%;

	& > div.setting-item-control {
		width: 100%;
		flex-direction: column;
		align-items: start;

		& > .better-properties-list-setting-items-container {
			width: var(--item-width);
			margin-inline-start: auto;

			& input,
			div.search-input-container {
				width: 100%;
			}

			& .setting-item[data-is-dragged="true"] {
				opacity: 0.5;
			}

			& .setting-item[data-dragged-over]:not([data-is-dragged="true"]) {
				/* border-top: 2px solid var(--interactive-accent); */
				/* box-shadow: inset 0px 4px 0px 0px var(--interactive-accent); */
				position: relative;
				&::after {
					content: "";
					position: absolute;
					width: 100%;
					height: 2px;
					background-color: var(--interactive-accent);
				}
				&[data-dragged-over="top"]::after {
					top: 0;
				}
				&[data-dragged-over="bottom"]::after {
					bottom: 0;
				}
			}
		}

		& > .better-properties-list-setting-footer {
			margin-inline-start: auto;
			display: flex;
			align-items: center;
			gap: var(--size-4-2);
		}
	}
}

.vertical-tab-nav-item {
	&.better-properties-mod-unsupported {
		color: var(--text-muted);
		text-decoration: line-through;
	}

	&.better-properties-mod-active {
		position: relative;
		--better-properties-active-text: "active";
		/* text-decoration: underline;
		text-underline-offset: 2px; */
	}

	&.better-properties-mod-active::after {
		content: var(--better-properties-active-text);
		display: inline-block;
		margin-inline-start: var(--size-4-2);
		font-size: var(--font-smallest);
		border: 1px solid var(--background-modifier-border);
		border-radius: var(--radius-s);
		padding: var(--size-2-1);
		background-color: var(--background-primary);
	}
}

.better-properties-mod-w-full {
	width: 100%;
}

.better-properties-validity {
	&[data-is-valid="true"] {
		color: var(--text-success);
	}
	&[data-is-valid="false"] {
		color: var(--text-error);
	}
}

.better-properties-dropown-property-value {
	display: flex;
	justify-content: center;
	align-items: center;
	gap: var(--size-2-2);

	/* & .better-properties-dropdown-link-button {
		display: inline-flex;
	} */
}

.better-properties-mod-warning {
	display: flex;
	align-items: start;
	gap: 1ch;
	color: var(--text-warning);
}

.multi-select-container {
	--width: 40ch;
	.setting-item-control > & {
		width: var(--width);
	}

	& .multi-select-input {
		padding: var(--pill-padding-y) 0;
		text-align: start;
	}
}

div.metadata-content {
	&[data-better-properties-show-hidden="false"]
		> div.metadata-properties
		> div.metadata-property[data-better-properties-hidden="true"] {
		display: none;
	}

	& > div.metadata-properties {
		position: relative;
		& > .better-properties-label-width-resizer {
			position: absolute;
			height: 100%;
			width: 6px;
			background-color: transparent;
			top: 0;
			left: -5px;
			transform: translateX(var(--metadata-label-width));
			cursor: col-resize;

			&:hover::after,
			&[data-is-dragging]::after {
				background-color: hsl(var(--accent-h) var(--accent-s) var(--accent-l));
			}

			&::after {
				position: absolute;
				content: "";
				height: 100%;
				width: 1px;
				left: 50%;
				top: 50%;
				transform: translate(-50%, -50%);
			}
		}
	}
}

.better-properties-drag-overlay {
	position: fixed;
	inset: 0;
	background-color: transparent;
}

.better-properties-vertical-tab-modal-title {
	font-size: var(--font-ui-medium);
	text-overflow: ellipsis;
	overflow-x: hidden;
}

.menu-item[data-is-better-properties] .menu-item-icon {
	color: var(--text-accent);
}

.better-properties-mod-error {
	color: var(--text-error);

	&:hover,
	&.clickable-icon:hover {
		color: var(--text-error);
		opacity: 0.5;
	}
}

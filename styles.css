body {
	--better-properties-select-opactiy: 1;
	--better-properties-select-saturation: 55%;
	--better-properties-select-lightness: 30%;
	--better-properties-select-bg: var(--better-properties-select-gray);

	&.theme-light {
		--better-properties-select-saturation: 80%;
		--better-properties-select-lightness: 80%;
	}

	--better-properties-select-red: hsl(
		from rgb(var(--color-red-rgb)) h var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-orange: hsl(
		from rgb(var(--color-orange-rgb)) h
			var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-yellow: hsl(
		from rgb(var(--color-yellow-rgb)) h
			var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-green: hsl(
		from rgb(var(--color-green-rgb)) h
			var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-blue: hsl(
		from rgb(var(--color-blue-rgb)) h var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-cyan: hsl(
		from rgb(var(--color-cyan-rgb)) h var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-purple: hsl(
		from rgb(var(--color-purple-rgb)) h
			var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);
	--better-properties-select-pink: hsl(
		from rgb(var(--color-pink-rgb)) h var(--better-properties-select-saturation)
			var(--better-properties-select-lightness)
	);

	--better-properties-select-transparent: transparent;
	--better-properties-select-gray: hsl(
		from gray h s var(--better-properties-select-lightness)
	);
	--better-properties-select-custom: linear-gradient(
		90deg,
		var(--better-properties-select-blue) 0%,
		var(--better-properties-select-green) 50%,
		var(--better-properties-select-red) 100%
	);
	--better-properties-select-watermelon: radial-gradient(
		circle,
		var(--better-properties-select-red) 0%,
		/* var(--better-properties-select-green) 50%, */
			var(--better-properties-select-green) 100%
	);
}

.better-properties-select,
.better-properties-select-option {
	color: var(--metadata-input-text-color);
	background: var(--better-properties-select-bg);
	border-radius: var(--radius-s);
	padding: var(--size-2-1) var(--size-2-2);
	width: fit-content;
	flex: unset;
}

.metadata-property-value {
	&[data-property-type="better-properties:select"] {
		padding: var(--size-2-2);
		display: flex;
		justify-content: start;
		align-items: center;
		gap: var(--size-4-1);
		padding: var(--input-padding);
		width: 100%;
		min-width: fit-content;
		text-wrap: nowrap;
	}

	&[data-property-type="better-properties:toggle"] {
		padding: var(--input-padding);
		height: var(--input-height);
	}

	/* &[data-property-type="better-properties:time"] {
	} */

	&[data-property-type="better-properties:color"] {
		padding: var(--input-padding);
		height: var(--input-height);
		/* font-size: var(--metadata-input-font-size); */
		width: 100%;

		& > .better-properties-color-text-component-container {
			gap: 0;
			width: 100%;
			& > input[type="text"] {
				background-color: transparent;
				text-overflow: ellipsis;
				width: 100%;
			}
		}
	}

	&[data-property-type="better-properties:slider"] {
		& > .better-properties-slider-container {
			padding: var(--input-padding);
			height: var(--input-height);
			display: flex;
			align-items: center;
			font-size: var(--metadata-input-font-size);
			gap: var(--size-2-3);

			&[data-better-properties-slider-hide-limit="true"] {
				& > .better-properties-slider-limit {
					display: none;
				}
			}
		}
	}

	&.better-properties-mod-created {
		pointer-events: none;
	}

	&.better-properties-mod-title {
		width: 100%;
		& > input {
			background-color: transparent;
			width: 100%;
		}
	}

	&[data-property-type="better-properties:datecustom"] {
		padding: var(--input-padding);
		height: var(--input-height);
		/* font-size: var(--metadata-input-font-size); */
		display: flex;
		align-items: center;

		& > .metadata-input-longtext {
			padding-inline-start: 0;
		}

		& > .better-properties-datecustom-button-container {
			position: relative;

			& > .better-properties-datecustom-button {
				&:focus,
				&:active {
					outline: 3px solid var(--background-modifier-border-focus);
				}
			}

			& > input[type="date"],
			& > input[type="datetime-local"] {
				opacity: 0;
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
				pointer-events: none;
			}
		}

		& > .better-properties-datecustom-format {
			&[data-better-properties-is-empty="true"] {
				color: var(--text-muted);
			}
		}
	}

	&[data-property-type="better-properties:rating"] {
		padding: var(--input-padding);
		height: var(--input-height);

		& > .better-properties-rating-container {
			display: flex;
			/* flex-wrap: wrap; */
			justify-content: center;
			align-items: center;

			& > .clickable-icon {
				opacity: 1;
			}

			& > .better-properties-rating-checkbox {
				&:hover {
					background-color: var(--interactive-hover);
				}

				&:focus,
				&:active {
					outline: 3px solid var(--background-modifier-border-focus);
				}

				&[aria-checked="true"] {
					color: var(--text-accent);
				}
				&[aria-checked="false"] {
					color: var(--text-faint);
				}
			}
		}
	}

	&[data-property-type="better-properties:markdown"] {
		padding: var(--input-padding);
		font-size: var(--metadata-input-font-size);

		&:has(.collapse-indicator.collapse-icon) {
			padding: 0 16px; /* 10px is width of svg-icon and 5px is padding-inline-end of .collapse-indicator plus an extra 1px for space... unfortunately these are manually defined in default stylesheet */
		}
		width: 100%;
		font-family: var(--font-text) !important;
		line-height: var(--line-height-normal) I !important;

		& > .cm-s-obsidian.mod-cm6.node-insert-event.is-live-preview {
			width: 100%;
		}

		/* & .markdown-source-view.mod-cm6.is-readable-line-width .cm-content,
		& .mod-cm6.is-readable-line-width .cm-content {
			width: unset !important;
		} */

		& div.cm-gutters {
			display: none !important;
		}
		& div.cm-scroller {
			overflow: visible;

			.Í¼1 & {
				font-family: var(--font-text);
				line-height: var(--line-height-normal);
			}
		}

		& .cm-line:not(.HyperMD-codeblock),
		& .cm-content,
		& .cm-sizer {
			max-width: none !important;
			/* width: fit-content !important; */
			width: 100% !important;
			line-height: inherit !important;
			display: inline-block;
		}
		& div[role="textbox"] {
			/* width: fit-content; */
			/* width: 100% !important; */
			text-wrap: wrap;
			white-space: pre-line;
			display: inline-flex;
			flex-direction: column;
		}
		& * {
			text-align: inherit;
			/* width: 100% !important; */
		}
	}
}

.metadata-property:has(.dropdown) {
	--input-radius: unset;
}

.metadata-property:has(
		> .metadata-property-value
			> &[data-property-type="better-properties:rating"]
	) {
	& > .metadata-property-value:focus-within {
		background-color: var(--metadata-input-background);
	}
}

.metadata-property:has(
		> .metadata-property-key
			> .better-properties-properties-group-collapse-indicator[data-better-properties-is-collapsed]
	) {
	.metadata-property-value {
		display: none;
	}
	.better-properties-properties-group-collapse-indicator {
		--better-properties-collapse-opacity: 1;
	}
}

.metadata-property:has(.better-properties-mod-group) {
	display: flex;
	flex-direction: column;
	position: relative;
	--better-properties-indent-size: var(--list-indent-editing);
	--better-properties-indent-size-2x: calc(var(--list-indent-editing) * 2);
	--better-properties-collapse-opacity: 0;

	&:hover {
		--better-properties-collapse-opacity: 1;
	}

	> .metadata-property-value:focus-within {
		background-color: var(--metadata-input-background);
	}

	.better-properties-properties-group-collapse-indicator {
		display: flex;
		justify-content: center;
		align-items: center;
		margin: auto 0;
		opacity: var(--better-properties-collapse-opacity);

		svg.svg-icon {
			color: var(--nav-collapse-icon-color);
			/* stroke-width: 4px;
			width: 10px;
			height: 10px; */
			transition: transform 100ms ease-in-out;
		}

		&[data-better-properties-is-collapsed] {
			transform: rotate(calc(var(--direction) * 90deg));

			svg.svg-icon {
				color: var(--collapse-icon-color-collapsed);
			}
		}
	}

	&::before {
		content: "";
		position: absolute;
		left: calc(
			var(--better-properties-indent-size) - 1px
		); /* TODO idk why this needs to be offset by 1px */
		top: var(--input-height);
		width: var(--indentation-guide-width);
		height: calc(100% - var(--input-height));
		background-color: var(--indentation-guide-color);
	}

	.better-properties-property-value-inner.better-properties-mod-group.metadata-container {
		display: flex;
		flex-direction: column;
		width: 100%;
		margin-inline-start: var(--better-properties-indent-size-2x);
		margin-block-end: 0px;

		div.better-properties-property-group-add-property.metadata-add-button.text-icon-button {
			width: fit-content;
		}

		/* TODO this still isn't quite matching the default... it's just not square */
		div.clickable-icon.metadata-property-warning-icon {
			--icon-size: var(--icon-s);
			margin-inline-end: 0px;
			margin-inline-start: 0px;

			&:hover {
				color: var(--text-warning);
				background-color: rgba(var(--color-orange-rgb), 0.15);
			}
		}
	}
}

div.setting-item.better-properties-list-setting {
	flex-direction: column;
	align-items: start;
	--item-width: 100%;

	& > div.setting-item-control {
		width: 100%;
		flex-direction: column;
		align-items: start;

		& > .better-properties-list-setting-items-container {
			width: var(--item-width);
			margin-inline-start: auto;

			& input,
			div.search-input-container {
				/* width: 100%; */
				flex-grow: 1;
			}

			& .setting-item[data-is-dragged="true"] {
				opacity: 0.5;
			}

			& .setting-item[data-dragged-over]:not([data-is-dragged="true"]) {
				/* border-top: 2px solid var(--interactive-accent); */
				/* box-shadow: inset 0px 4px 0px 0px var(--interactive-accent); */
				position: relative;
				&::after {
					content: "";
					position: absolute;
					width: 100%;
					height: 2px;
					background-color: var(--interactive-accent);
				}
				&[data-dragged-over="top"]::after {
					top: 0;
				}
				&[data-dragged-over="bottom"]::after {
					bottom: 0;
				}
			}
		}

		& > .better-properties-list-setting-footer {
			margin-inline-start: auto;
			display: flex;
			align-items: center;
			gap: var(--size-4-2);
		}
	}
}

.vertical-tab-nav-item {
	&.better-properties-mod-unsupported {
		color: var(--text-muted);
		text-decoration: line-through;
	}

	&.better-properties-mod-active {
		position: relative;
		--better-properties-active-text: "active";
		/* text-decoration: underline;
		text-underline-offset: 2px; */
	}

	&.better-properties-mod-active::after {
		content: var(--better-properties-active-text);
		display: inline-block;
		margin-inline-start: var(--size-4-2);
		font-size: var(--font-smallest);
		border: 1px solid var(--background-modifier-border);
		border-radius: var(--radius-s);
		padding: var(--size-2-1);
		background-color: var(--background-primary);
	}
}

.better-properties-mod-w-full {
	width: 100%;
}

.better-properties-validity {
	&[data-is-valid="true"] {
		color: var(--text-success);
	}
	&[data-is-valid="false"] {
		color: var(--text-error);
	}
}

.better-properties-dropown-property-value {
	display: flex;
	justify-content: center;
	align-items: center;
	gap: var(--size-2-2);

	/* & .better-properties-dropdown-link-button {
		display: inline-flex;
	} */
}

.better-properties-mod-warning {
	display: flex;
	align-items: start;
	gap: 1ch;
	color: var(--text-warning);
}

.multi-select-container {
	--width: 40ch;
	.setting-item-control > & {
		width: var(--width);
	}

	& .multi-select-input {
		padding: var(--pill-padding-y) 0;
		text-align: start;
	}
}

div.metadata-content {
	&[data-better-properties-show-hidden="false"]
		> div.metadata-properties
		> div.metadata-property[data-better-properties-hidden="true"] {
		display: none;
	}

	& > div.metadata-properties {
		position: relative;
		& > .better-properties-label-width-resizer {
			position: absolute;
			height: 100%;
			width: 6px;
			background-color: transparent;
			top: 0;
			left: -5px;
			transform: translateX(var(--metadata-label-width));
			cursor: col-resize;

			&:hover::after,
			&[data-is-dragging]::after {
				background-color: hsl(var(--accent-h) var(--accent-s) var(--accent-l));
			}

			&::after {
				position: absolute;
				content: "";
				height: 100%;
				width: 1px;
				left: 50%;
				top: 50%;
				transform: translate(-50%, -50%);
			}
		}
	}
}

.better-properties-drag-overlay {
	position: fixed;
	inset: 0;
	background-color: transparent;
}

.better-properties-vertical-tab-modal-title {
	font-size: var(--font-ui-medium);
	text-overflow: ellipsis;
	overflow-x: hidden;
}

.menu-item[data-is-better-properties] .menu-item-icon {
	color: var(--text-accent);
}

.better-properties-mod-error {
	color: var(--text-error);

	&:hover,
	&.clickable-icon:hover {
		color: var(--text-error);
		opacity: 0.5;
	}
}

.better-properties-color-text-component-container {
	display: flex;
	align-items: center;
	gap: var(--size-2-2);
	& > .better-properties-color-text-component-colors-container {
		& > input[type="color"] {
			opacity: 0;
			position: absolute;
			left: 50%;
			top: 50%;
			transform: translate(-50%, -50%);
			pointer-events: none;
		}
	}
}

.better-properties-swatch {
	background: var(--better-properties-bg, black);
	height: var(--swatch-width);
	width: var(--swatch-width);
	border-radius: var(--swatch-radius);
	box-shadow: var(--swatch-shadow);
	/* margin: calc(var(--swatch-width) / 2); */
	caret-color: transparent;
	color: transparent;
	cursor: var(--cursor);
	display: flex;
	justify-content: center;
	align-items: center;

	&:focus-within,
	&:active,
	&:hover {
		outline: 3px solid var(--background-modifier-border-focus);
	}

	& > .better-properties-swatch-input {
		opacity: 0;
		width: 0;
		height: 0;
		pointer-events: none;
	}
}

.better-properties-combobox-select {
	display: flex;
	height: var(--input-height);
	align-items: center;
	gap: var(--size-2-1);
	min-width: 0;
	width: fit-content;
	font-size: var(--metadata-input-font-size);
	cursor: default;
	--better-properties-close-display: none;

	&:focus-within {
		--better-properties-close-display: flex;
		opacity: 1;
	}

	&:focus-within,
	&:active {
		outline: 3px solid var(--background-modifier-border-focus);
	}

	&.data-better-properties-combobox-mod-empty {
		opacity: 0;
		width: 100%;
		height: 100%;
	}

	& > .better-properties-combobox-select-close {
		cursor: var(--cursor);
		color: rgb(var(--mono-rgb-100));
		border-radius: var(--radius-s);
		display: var(--better-properties-close-display);
		align-items: center;
		--icon-size: var(--icon-xs);
		--icon-stroke: var(--icon-xs-stroke-width);

		&:hover {
			color: rgb(var(--mono-rgb-0));
		}
	}
}

.better-properties-combobox-search {
	flex: auto;
}

[data-better-properties-hidden="true"] {
	display: none;
}
.better-properties-searchable-menu.menu {
	/* TODO can't get user-select:text to work anywhere in here */
	user-select: text;
	& .search-input-container {
		--search-icon-color: var(--text-faint);
		margin-bottom: var(--size-2-3);
		padding-bottom: var(--size-4-1);
		border-bottom: var(--border-width) solid var(--background-modifier-border);

		& input[type="search"] {
			border: 0;
			box-shadow: none;
			background-color: transparent;
			user-select: text;
		}
	}

	.menu-item.is-disabled[data-section="body"] {
		display: none;
	}
}
